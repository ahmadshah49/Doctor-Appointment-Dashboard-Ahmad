generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://ahmad:razahmad@cluster0.yaxqeiz.mongodb.net/Doctor_appointment"
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String?        @unique
  name             String?
  password         String?
  image            String?
  companyName      String?
  profileImage     String?
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  emailVerified    DateTime?
  patients         Patient[]
  appointments     Appointment[]  @relation("DoctorAppointments")
  accounts         Account[]
  notifications    Notification[]
  task             Task[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  data      String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

enum PatientStatus {
  ONGOING
  RECOVERED
  WAITING
}

model Patient {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  diagnosis       String
  profileImage    String?
  status          PatientStatus @default(WAITING)
  appointmentDate String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String        @db.ObjectId
  createdAt       DateTime      @default(now())
  upDatedAt       DateTime      @updatedAt
}

enum AppointmentType {
  Online_Consultation
  Offline_Consultation
}

model Appointment {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  start           DateTime
  end             DateTime
  purpose         String
  status          PatientStatus
  appointmentType AppointmentType

  user   User?   @relation("DoctorAppointments", fields: [userId], references: [id])
  userId String? @db.ObjectId
}

enum TaskStatus {
  NOT_COMPLETED
  COMPLETED
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  completed   TaskStatus
  date        DateTime   @default(now())
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
