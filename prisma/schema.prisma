generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://ahmad:razahmad@cluster0.yaxqeiz.mongodb.net/Doctor_appointment"
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String?   @unique
  name             String?
  password         String?
  image            String?
  companyName      String?
  profileImage     String?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  emailVerified    DateTime?

  patients     Patient[]     @relation("DoctorPatients")
  appointments Appointment[] @relation("DoctorAppointments")
  accounts     Account[]
  sessions     Session[]
}

model Patient {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  age            Int
  profileImage   String?
  medicalHistory String?
  doctor         User    @relation("DoctorPatients", fields: [doctorId], references: [id])
  doctorId       String  @db.ObjectId

  appointments Appointment[] @relation("PatientAppointments")
}

model Appointment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  date            DateTime
  time            String
  purpose         String
  appointmentType String
  patient         Patient  @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId       String   @db.ObjectId
  doctor          User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId        String   @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
